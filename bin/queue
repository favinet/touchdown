#!/usr/bin/env node

var path = require('path-exists');
var moduleName = "default";

if(process.argv.length > 1)
  moduleName = process.argv[2];


var modulePath = '../queues/'+moduleName;
if(!path(modulePath + ".js"))
{
  console.log("schedule module is not exist");
  return;
}

var worker = require(modulePath);
var RunObject = worker.RunObject;
var mongoose = require('mongoose');

//mongoose.connect('mongodb://58.180.56.34:27017/touchdown');
mongoose.connect('mongodb://nzon:dpswhs*23@db.touch-down.co.kr:50000/touchdown');

var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function callback () {
  console.log('connection successful...');
});

//rsmp listener

RedisSMQ = require("rsmq");
rsmq = new RedisSMQ( {host: "app.touch-down.co.kr", port: 6379, ns: "rsmq"} );

rsmq.createQueue({qname:moduleName}, function (err, resp) {

  if(err)
  {
    console.log("queue created fail : " + err);
  }
  else
  {
    if (resp===1)
    {
      console.log("queue created");
    }
    else
    {
      process.exit(1);
    }
  }
});
/*
rsmq.receiveMessage({qname:moduleName}, function (err, resp) {

  if(err)
  {
    console.log("receiveMessage fail : " + err);
  }
  else
  {
    if (resp.id) {
      //  resp.message;
      console.log("Message received.", resp);
      var robj = new RunObject();
      robj.start(resp.message, sendQueueCallback);
    }
    else {
      console.log("No messages for me...")
    }
  }

});
*/
var RSMQWorker = require( "rsmq-worker" );
var worker = new RSMQWorker( moduleName, {
  interval: [ .1, 1 ],                // wait 100ms between every receive and step up to 1,3 on empty receives
  invisibletime: 2,                       // hide received message for 5 sec
  maxReceiveCount: 2,                 // only receive a message 2 times until delete
  autostart: true,                        // start worker on init
  rsmq:rsmq
});

// Listen to errors
worker.on('error', function( err, msg ){
  console.log( "ERROR", err, msg.id );
});
worker.on('timeout', function( msg ){
  console.log( "TIMEOUT", msg.id, msg.rc );
});

worker.on( "message", function( message, next, id ){

  if (id)
  {
    //  resp.message;
    console.log("Message received." + id);
    var robj = new RunObject();
    robj.start(message, sendQueueCallback);
    next();
  }
  else
  {
    console.log("No messages for me...");
  }
});

function sendQueueCallback(json)
{

  rsmq.sendMessage({qname:moduleName, message:json.message, delay:json.delay}, function (err, resp) {
    if (resp) {
      console.log("Message sent. ID:", resp);
    }
  });

}

function fileExists(filePath)
{
  try
  {
    return fs.statSync(filePath).isFile();
  }
  catch (err)
  {
    return false;
  }
}
//download

